"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 5.0.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path  # This helps us work with file paths easily.
from datetime import timedelta  # This allows us to set time durations.
from dotenv import load_dotenv  # This helps us load environment variables from a .env file.
import os  # This allows us to interact with the operating system.

# Load environment variables from a .env file.
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-3vn)w+)8#c)^biz+y5=zpquf*bis141t16cvew6)m#(e(h0l*3'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

# Here, "*" means all hosts are allowed (not secure for production).
ALLOWED_HOSTS = ["*"]

# REST framework settings for Django.
REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_simplejwt.authentication.JWTAuthentication",  # Use JWT for authentication.
    ),
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.IsAuthenticated",  # By default, only authenticated users can access the API.
    ],
}

# Settings for JSON Web Tokens (JWT).
SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=60),  # Access tokens are valid for 60 minutes.
    "REFRESH_TOKEN_LIFETIME": timedelta(days=1),  # Refresh tokens are valid for 1 day.
}

## Application definition
INSTALLED_APPS = [
    'django.contrib.admin',  # Admin interface.
    'django.contrib.auth',  # Authentication system.
    'django.contrib.contenttypes',  # Content types framework.
    'django.contrib.sessions',  # Session framework.
    'django.contrib.messages',  # Messaging framework.
    'django.contrib.staticfiles',  # Framework for serving static files.
    "api",  # Our custom app named 'api' this is where the authentication stuff will be hosted.
    "rest_framework",  # Django REST framework.
    "corsheaders"  # Handling Cross-Origin Resource Sharing (CORS).
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',  # Security-related middleware.
    'django.contrib.sessions.middleware.SessionMiddleware',  # Manages sessions across requests.
    'django.middleware.common.CommonMiddleware',  # Provides common HTTP functionalities.
    'django.middleware.csrf.CsrfViewMiddleware',  # Protects against Cross-Site Request Forgery (CSRF).
    'django.contrib.auth.middleware.AuthenticationMiddleware',  # Associates users with requests using sessions.
    'django.contrib.messages.middleware.MessageMiddleware',  # Manages temporary messages.
    'django.middleware.clickjacking.XFrameOptionsMiddleware',  # Prevents clickjacking attacks.
    "corsheaders.middleware.CorsMiddleware",  # Handles CORS.
]

ROOT_URLCONF = 'backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'backend.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# CORS settings.
CORS_ALLOW_ALL_ORIGINS = True  # Allow all origins to make requests (not secure for production).
CORS_ALLOW_CREDENTIALS = True  # Allow credentials to be included in requests.